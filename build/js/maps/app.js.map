{"version":3,"sources":["matrix-display.js"],"names":["charTable","0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"," ","!",":","displayChar","char","colStart","toString","toUpperCase","forEach","row","rowIndex","column","val","dot","document","querySelector","classList","add","remove","inputThingy","value","split","index","addEventListener","e","displayChars","length","push"],"mappings":"aAAA,IAAAA,UAAA,CACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,EAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,IAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,IAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,IACAC,IAAA,CAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,KAGAC,YAAA,SAAAC,EAAAC,GACA1C,UAAAyC,EAAAE,WAAAC,eAAAC,QAAA,SAAAC,EAAAC,GACA,IAAAC,EAAAN,EACAI,EAAAD,QAAA,SAAAI,GACA,IAAAC,EAAAC,SAAAC,cAAA,KAAAL,EAAA,KAAAC,GACAC,EAAAC,EAAAG,UAAAC,IAAA,UAAAJ,EAAAG,UAAAE,OAAA,UACAP,SAMAQ,YAAAL,SAAAC,cAAA,SACAI,YAAAC,MAAAC,MAAA,IAAAb,QAAA,SAAAJ,EAAAkB,GACAnB,YAAAC,EAAA,EAAAkB,KAIAH,YAAAI,iBAAA,QAAA,SAAAC,GACA,IAAAC,EAAAN,YAAAC,MAAAC,MAAA,IAGA,GAAAI,EAAAC,OAAA,GACA,KAAAD,EAAAC,QAAA,IACAD,EAAAE,KAAA,KAIAF,EAAAjB,QAAA,SAAAJ,EAAAkB,GACAnB,YAAAC,EAAA,EAAAkB","file":"../app.js","sourcesContent":["const charTable = {\n  '0': [[1, 1, 1, 1], [1, 0, 0, 1], [1, 0, 0, 1], [1, 0, 0, 1], [1, 1, 1, 1]],\n  '1': [[0, 1, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [1, 1, 1, 1]],\n  '2': [[1, 1, 1, 1], [0, 0, 0, 1], [1, 1, 1, 1], [1, 0, 0, 0], [1, 1, 1, 1]],\n  '3': [[1, 1, 1, 1], [0, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1], [1, 1, 1, 1]],\n  '4': [[1, 0, 0, 1], [1, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1]],\n  '5': [[1, 1, 1, 1], [1, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 1], [1, 1, 1, 1]],\n  '6': [[1, 1, 1, 1], [1, 0, 0, 0], [1, 1, 1, 1], [1, 0, 0, 1], [1, 1, 1, 1]],\n  '7': [[1, 1, 1, 1], [1, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1]],\n  '8': [[1, 1, 1, 1], [1, 0, 0, 1], [1, 1, 1, 1], [1, 0, 0, 1], [1, 1, 1, 1]],\n  '9': [[1, 1, 1, 1], [1, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1], [1, 1, 1, 1]],\n  A: [[0, 1, 1, 0], [1, 0, 0, 1], [1, 1, 1, 1], [1, 0, 0, 1], [1, 0, 0, 1]],\n  B: [[1, 1, 1, 0], [1, 0, 0, 1], [1, 1, 1, 1], [1, 0, 0, 1], [1, 1, 1, 0]],\n  C: [[1, 1, 1, 1], [1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0], [1, 1, 1, 1]],\n  D: [[1, 1, 1, 0], [1, 0, 0, 1], [1, 0, 0, 1], [1, 0, 0, 1], [1, 1, 1, 0]],\n  E: [[1, 1, 1, 1], [1, 0, 0, 0], [1, 1, 1, 1], [1, 0, 0, 0], [1, 1, 1, 1]],\n  F: [[1, 1, 1, 1], [1, 0, 0, 0], [1, 1, 1, 1], [1, 0, 0, 0], [1, 0, 0, 0]],\n  G: [[1, 1, 1, 1], [1, 0, 0, 0], [1, 0, 1, 1], [1, 0, 0, 1], [1, 1, 1, 1]],\n  H: [[1, 0, 0, 1], [1, 0, 0, 1], [1, 1, 1, 1], [1, 0, 0, 1], [1, 0, 0, 1]],\n  I: [[0, 1, 1, 1], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 1, 1, 1]],\n  J: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 0, 0, 1], [1, 1, 1, 1]],\n  K: [[1, 0, 0, 1], [1, 0, 1, 0], [1, 1, 0, 0], [1, 0, 1, 0], [1, 0, 0, 1]],\n  L: [[1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0], [1, 1, 1, 1]],\n  M: [[1, 0, 0, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 0, 0, 1], [1, 0, 0, 1]],\n  N: [[1, 0, 0, 1], [1, 1, 0, 1], [1, 1, 1, 1], [1, 0, 1, 1], [1, 0, 0, 1]],\n  O: [[1, 1, 1, 1], [1, 0, 0, 1], [1, 0, 0, 1], [1, 0, 0, 1], [1, 1, 1, 1]],\n  P: [[1, 1, 1, 1], [1, 0, 0, 1], [1, 1, 1, 1], [1, 0, 0, 0], [1, 0, 0, 0]],\n  Q: [[1, 1, 1, 1], [1, 0, 0, 1], [1, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1]],\n  R: [[1, 1, 1, 1], [1, 0, 0, 1], [1, 1, 1, 1], [1, 0, 1, 0], [1, 0, 0, 1]],\n  S: [[1, 1, 1, 1], [1, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 1], [1, 1, 1, 1]],\n  T: [[0, 1, 1, 1], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0]],\n  U: [[1, 0, 0, 1], [1, 0, 0, 1], [1, 0, 0, 1], [1, 0, 0, 1], [1, 1, 1, 1]],\n  V: [[1, 0, 0, 1], [1, 0, 0, 1], [1, 0, 0, 1], [1, 0, 1, 0], [1, 1, 0, 0]],\n  W: [[1, 0, 0, 1], [1, 0, 0, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 0, 0, 1]],\n  X: [[1, 0, 0, 1], [0, 1, 1, 0], [0, 1, 1, 0], [0, 1, 1, 0], [1, 0, 0, 1]],\n  Y: [[1, 0, 0, 1], [1, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 1], [1, 1, 1, 1]],\n  Z: [[1, 1, 1, 1], [0, 0, 0, 1], [0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]],\n  ' ': [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]],\n  '!': [[0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 0, 0], [0, 0, 1, 0]],\n  ':': [[0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]]\n}\n\nconst displayChar = (char, colStart) => {\n  charTable[char.toString().toUpperCase()].forEach((row, rowIndex) => {\n    let column = colStart\n    row.forEach((val) => {\n      const dot = document.querySelector(`#r${rowIndex}-i${column}`)\n      val ? dot.classList.add('active') : dot.classList.remove('active')\n      column++\n    })\n  })\n}\n\n// Show initial string\nconst inputThingy = document.querySelector('input')\ninputThingy.value.split('').forEach((char, index) => {\n  displayChar(char, index * 5)\n})\n\n// Change on user input\ninputThingy.addEventListener('input', e => {\n  let displayChars = inputThingy.value.split('')\n\n  // If not full width, pad with empty spaces to clear previous characters\n  if (displayChars.length < 11) {\n    while (displayChars.length <= 11) {\n      displayChars.push(' ')\n    }\n  }\n\n  displayChars.forEach((char, index) => {\n    displayChar(char, index * 5)\n  })\n})\n"]}